{"version":3,"sources":["assets/1.png","assets/2.png","assets/3.png","assets/4.png","assets/5.png","assets/6.png","assets/7.png","assets/8.png","assets/9.png","assets/10.png","assets/11.png","assets/12.png","components/imageContainer.js","components/mainFrame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","imageContainer","_this","this","react_default","a","createElement","className","alt","src","props","image","onClick","handleClick","id","Component","mainFrame","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","console","log","concat","state","lastId","setState","message","shuffleData","imgData","score","length","tempScore","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","img1","img2","img3","img4","img5","img6","img7","img8","img9","img10","img11","img12","_this2","map","card","key","src_components_imageContainer","App","components_mainFrame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7b25e7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.79d6305a.png\";","module.exports = __webpack_public_path__ + \"static/media/2.20dc454c.png\";","module.exports = __webpack_public_path__ + \"static/media/3.bb7fbaa5.png\";","module.exports = __webpack_public_path__ + \"static/media/4.c5c89501.png\";","module.exports = __webpack_public_path__ + \"static/media/5.02de9f9e.png\";","module.exports = __webpack_public_path__ + \"static/media/6.c248eb34.png\";","module.exports = __webpack_public_path__ + \"static/media/7.a58520a8.png\";","module.exports = __webpack_public_path__ + \"static/media/8.dd5db420.png\";","module.exports = __webpack_public_path__ + \"static/media/9.57d04bfe.png\";","module.exports = __webpack_public_path__ + \"static/media/10.55803845.png\";","module.exports = __webpack_public_path__ + \"static/media/11.dd2bbeae.png\";","module.exports = __webpack_public_path__ + \"static/media/12.3cd4cc39.png\";","import React, { Component } from 'react';\nimport './imageContainer.css';\nclass imageContainer extends Component {\n  render() {\n    return (\n      <div>\n          <img className=\"img-fluid img-thumbnail\" alt=\"oka\" src={this.props.image} onClick={()=>this.props.handleClick(this.props.id)} />\n      </div>\n    );\n  }\n}\n\nexport default imageContainer;\n","import React, { Component } from 'react';\nimport img1 from '../assets/1.png';\nimport img2 from '../assets/2.png';\nimport img3 from '../assets/3.png';\nimport img4 from '../assets/4.png';\nimport img5 from '../assets/5.png';\nimport img6 from '../assets/6.png';\nimport img7 from '../assets/7.png';\nimport img8 from '../assets/8.png';\nimport img9 from '../assets/9.png';\nimport img10 from '../assets/10.png';\nimport img11 from '../assets/11.png';\nimport img12 from '../assets/12.png';\nimport ImgContainer from './imageContainer';\n\nclass mainFrame extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      imgData:[\n        {\n          \"id\":1,\n          src:img1\n        },\n        {\n          \"id\":2,\n          src:img2\n        },\n        {\n          \"id\":3,\n          src:img3\n        },\n        {\n          \"id\":4,\n          src:img4\n        },\n        {\n          \"id\":5,\n          src:img5\n        },\n        {\n          \"id\":6,\n          src:img6\n        },\n        {\n          \"id\":7,\n          src:img7\n        },\n        {\n          \"id\":8,\n          src:img8\n        },\n        {\n          \"id\":9,\n          src:img9\n        },\n        {\n          \"id\":10,\n          src:img10\n        },\n        {\n          \"id\":11,\n          src:img11\n        },\n        {\n          \"id\":12,\n          src:img12\n        },\n      ],\n      score:0,\n      lastId:null,\n      message:'Click any image to start playing!'\n    }\n  }\n\n  handleClick=(id)=>{\n    console.log(`picture with ${id} clicked`);\n    if(this.state.lastId===null){\n      this.setState(\n        {\n          lastId:id,\n          message:'Great! Now click different image to score'\n        }\n      );\n      this.shuffleData(this.state.imgData);\n    } else if(this.state.score+1>=this.state.imgData.length) {\n        this.setState({\n          message:'YOU WON',\n          score:0\n        })\n    }\n    else if(id!==this.state.lastId){\n      let tempScore = this.state.score+1;\n      this.setState(\n        {\n          score:tempScore,\n          message:'Score : '\n        }\n      );\n      this.shuffleData(this.state.imgData);\n    } else {\n        this.setState(\n          {\n            message:'GAME OVER',\n            score:0\n          }\n        )\n      \n    }\n  }\n\n  shuffleData=(array)=>{\n    \n      var currentIndex = array.length, temporaryValue, randomIndex;\n    \n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n    \n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n    \n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n      \n      console.log(array);\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"text-center text-white mt-2\">\n          <h1>Click Game!</h1>\n          <h3>Don't click same image twice</h3>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <h2 className=\"text-center text-white\">{this.state.message} {this.state.score>0?this.state.score:''}</h2>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"row mt-5\">\n              {this.state.imgData.map((card)=>{\n                return (\n                  <div key={card.id} className=\"col-sm-3 text-center\">\n                    <ImgContainer  image={card.src} id={card.id} handleClick={this.handleClick}/>\n                  </div>\n                  );\n              })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default mainFrame;\n","import React, { Component } from 'react';\nimport './App.css';\nimport MainFrame from './components/mainFrame';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <MainFrame/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}